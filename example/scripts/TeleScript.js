// TeleScript.js




class TeleScript {
    #memory = memory({
        users: {},  // { address: { chats: [chatId, ...] } }
        chats: {},  // { chatId: { members: [...], admins: [...], messages: [...], isPublic: true, sessionKeys: {} } }
    });


    /** üîπ Enregistre un utilisateur */
    registerUser() /* write */ {
        const sender = lower(caller);
        asserts(!this.#memory.users[sender], "Utilisateur d√©j√† enregistr√©");
        this.#memory.users[sender] = { chats: [] };
    }


    /** üîπ Supprime un utilisateur (lib√®re l'espace m√©moire) */
    unregisterUser() /* write */ {
        const sender = lower(caller);
        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");

        // üî• V√©rifier qu'il n'est pas admin d'un chat
        for (const chatId of this.#memory.users[sender].chats) {
            const chat = this.#memory.chats[chatId];

            if (chat.admins.includes(sender)) {
                asserts(chat.admins.length > 1, "Impossible de quitter : vous √™tes le seul admin du chat");
                chat.admins = chat.admins.filter(admin => admin !== sender);
            }

            // üî• Supprimer l'utilisateur du chat
            chat.members = chat.members.filter(member => member !== sender);

            // üî• Supprimer le chat si plus aucun membre
            if (chat.members.length === 0) {
                delete this.#memory.chats[chatId];
            }
        }

        // üî• Supprimer compl√®tement l'utilisateur
        delete this.#memory.users[sender];
    }


    /** üîπ Enregistre une cl√© de session chiffr√©e pour un utilisateur */
    registerSessionKey(chatId, encryptedSessionKey) /* write */ {
        const sender = lower(caller);
        const chat = this.#memory.chats[chatId];

        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(chat, "Chat introuvable");
        asserts(chat.members.includes(sender), "Non autoris√©");
        asserts(!chat.sessionKeys[sender], "Cl√© de session d√©j√† enregistr√©e");

        chat.sessionKeys[sender] = encryptedSessionKey;
    }


    /** üîπ Cr√©e un nouveau chat priv√© ou de groupe */
    createChat(members, encryptedSessionKeys = {}, isPublic = false) /* write */ {
        const sender = lower(caller);
        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(members.length >= 1, "Un chat doit avoir au moins un membre");

        const uniqueMembers = [...new Set([...members.map(lower), sender])]; // Inclus le cr√©ateur + Suppression des doublons + normalisation

        const chatId = hash(`${sender}-${Date.now()}`);

        this.#memory.chats[chatId] = {
            members: uniqueMembers,
            admins: [sender],
            messages: [],
            isPublic,
            sessionKeys: encryptedSessionKeys,
        };

        for (const member of uniqueMembers) {
            asserts(this.#memory.users[member], "Membre non enregistr√©");
            this.#memory.users[member].chats.push(chatId);
        }

        return chatId;
    }


    /** üîπ Envoie un message chiffr√© dans un chat */
    sendMessage(chatId, encryptedMessage, nonce) /* write */ {
        const sender = lower(caller);
        const chat = this.#memory.chats[chatId];

        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(chat, "Chat introuvable");
        asserts(chat.members.includes(sender), "Non autoris√©");

        this.#memory.chats[chatId].messages.push({ sender, encryptedMessage, nonce });

        return true;
    }


    /** üîπ Liste les messages chiffr√©s d'un chat */
    getMessages(chatId) {
        const sender = lower(caller);
        const chat = this.#memory.chats[chatId];

        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(chat, "Chat introuvable");
        asserts(chat.members.includes(sender), "Non autoris√©");

        return this.#memory.chats[chatId].messages;
    }


    /** üîπ Ajoute un membre √† un chat */
    addMember(chatId, newMember) /* write */ {
        const sender = lower(caller);
        const newMemberLower = lower(newMember);
        const chat = this.#memory.chats[chatId];

        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(this.#memory.users[newMemberLower], "Le membre n'est pas enregistr√©");
        asserts(chat, "Chat introuvable");
        asserts(this.#memory.chats[chatId].members.includes(sender), "Seul un membre peut ajouter d'autres membres");
        asserts(!chat.members.includes(newMemberLower), "D√©j√† membre");

        if (!chat.isPublic) {
            asserts(chat.admins.includes(sender), "Seuls les admins peuvent ajouter des membres dans un chat priv√©");
        }

        chat.members.push(newMemberLower);
        this.#memory.users[newMemberLower].chats.push(chatId);
    }



    removeMember(chatId, memberToRemove) /* write */ {
        const sender = lower(caller);
        const memberToRemoveLower = lower(memberToRemove);
        const chat = this.#memory.chats[chatId];

        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(this.#memory.users[memberToRemoveLower], "Le membre n'est pas enregistr√©");
        asserts(chat, "Chat introuvable");
        asserts(chat.members.includes(sender), "Non autoris√©");
        asserts(chat.members.includes(memberToRemoveLower), "Membre non trouv√© dans ce chat");

        // Seuls les admins peuvent exclure quelqu‚Äôun (sauf si c'est lui-m√™me)
        if (sender !== memberToRemoveLower) {
            asserts(chat.admins.includes(sender), "Seuls les admins peuvent retirer un membre");
        }

        // Retirer le membre du chat et sa cl√©
        chat.members = chat.members.filter(member => member !== memberToRemoveLower);
        delete chat.sessionKeys[memberToRemoveLower];

        // Retirer le chat de la liste de l'utilisateur
        this.#memory.users[memberToRemoveLower].chats = this.#memory.users[memberToRemoveLower].chats.filter(id => id !== chatId);

        // Si un admin quitte, il perd son r√¥le
        chat.admins = chat.admins.filter(admin => admin !== memberToRemoveLower);
        if (chat.admins.includes(memberToRemoveLower)) {
            asserts(chat.admins.length > 1, "Impossible de supprimer le dernier admin");
        }

        // Suppression automatique des chats fant√¥mes, pour chaque membre du chat en particulier si on est en train de supprimer le chat (en retirer le dernier membre)
        for (const user of chat.members) {
            this.#memory.users[user].chats = this.#memory.users[user].chats.filter(id => id !== chatId);
        }

        // Suppression automatique des chats fant√¥mes
        if (chat.members.length === 0) {
            delete this.#memory.chats[chatId];
        }
    }


    /** üîπ Liste les chats d'un utilisateur */
    getUserChats() {
        const sender = lower(caller);
        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        return this.#memory.users[sender].chats;
    }


    promoteToAdmin(chatId, newAdmin) /* write */ {
        const sender = lower(caller);
        const newAdminLower = lower(newAdmin);
        const chat = this.#memory.chats[chatId];

        asserts(this.#memory.users[sender], "Utilisateur non enregistr√©");
        asserts(this.#memory.users[newAdminLower], "Admin non enregistr√©");
        asserts(chat, "Chat introuvable");
        asserts(chat.admins.includes(sender), "Seuls les admins peuvent promouvoir un membre");
        asserts(chat.members.includes(newAdminLower), "Cet utilisateur n'est pas dans le chat");
        asserts(!chat.admins.includes(newAdminLower), "D√©j√† admin");

        chat.admins.push(newAdminLower);
    }


    getSessionKey(chatId, userAddress) {
        const sender = lower(caller);
        const chat = this.#memory.chats[chatId];
        const user = lower(userAddress);

        asserts(chat, "Chat introuvable");
        asserts(chat.members.includes(sender), "Non autoris√©");
        asserts(chat.members.includes(user), "Utilisateur non trouv√© dans ce chat");

        return chat.sessionKeys[user]; // Retourne la cl√© de session chiffr√©e pour cet utilisateur
    }

}


